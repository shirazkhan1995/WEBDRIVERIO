"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const plugin_1 = require("appium/plugin");
const element_1 = require("./element");
const logger_1 = __importDefault(require("./logger"));
class WaitCommandPlugin extends plugin_1.BasePlugin {
    constructor(name, cliArgs = {}) {
        super(name, cliArgs);
        this.cliArgs = cliArgs;
        this.name = name;
    }
    execute(next, driver, script, args) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.executeMethod(next, driver, script, args);
        });
    }
    setPluginProperties(next, driver, timeout, intervalBetweenAttempts, excludeEnabledCheck) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, element_1.setPluginProperties)(driver.sessionId, {
                timeout,
                intervalBetweenAttempts,
                excludeEnabledCheck,
            });
        });
    }
    getPluginProperties(next, driver) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, element_1.getPluginProperties)(driver.sessionId);
        });
    }
    createSession(next) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const result = yield next();
                const sessionId = result.value[0];
                const props = Object.assign({}, element_1.defaultTimeOuts, this.cliArgs);
                yield (0, element_1.setPluginProperties)(sessionId, props);
                const propset = yield (0, element_1.getPluginProperties)(sessionId);
                logger_1.default.info(`session ${sessionId} is created with ${JSON.stringify(propset)}`);
                return result;
            }
            catch (err) {
                logger_1.default.error('Failed to create sessions');
                throw err;
            }
        });
    }
    findElement(next, driver, ...args) {
        return __awaiter(this, void 0, void 0, function* () {
            let commandLineArgs = this.cliArgs;
            yield (0, element_1.find)(driver, args, commandLineArgs);
            return yield next();
        });
    }
    handle(next, driver, cmdName, ...args) {
        return __awaiter(this, void 0, void 0, function* () {
            const includeCommands = ['click', 'setValue', 'clear'];
            const timeoutProp = yield (0, element_1.getPluginProperties)(driver.sessionId);
            let executeCommands = [];
            if (timeoutProp) {
                executeCommands = timeoutProp.excludeEnabledCheck;
            }
            if (includeCommands.includes(cmdName) && !executeCommands.includes(cmdName)) {
                logger_1.default.info('Wait for element to be clickable');
                yield (0, element_1.elementEnabled)(driver, args[0]);
                logger_1.default.info('Element is enabled');
            }
            return yield next();
        });
    }
    static fakeRoute(req, res) {
        res.send(JSON.stringify({ fake: 'fakeResponse' }));
    }
    // eslint-disable-next-line no-unused-vars,require-await
    static updateServer(expressApp, httpServer) {
        return __awaiter(this, void 0, void 0, function* () {
            expressApp.all('/fake', WaitCommandPlugin.fakeRoute);
        });
    }
}
exports.default = WaitCommandPlugin;
WaitCommandPlugin.executeMethodMap = ({
    'plugin: getWaitPluginProperties': {
        command: 'getPluginProperties',
    },
    'plugin: setWaitPluginProperties': {
        command: 'setPluginProperties',
        params: {
            optional: ['timeout', 'intervalBetweenAttempts', 'excludeEnabledCheck'],
        },
    },
});
